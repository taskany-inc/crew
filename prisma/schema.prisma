generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(nanoid())
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?
  password                 String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                   String

  createdAt DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamp()
  updatedAt DateTime @default(dbgenerated("timezone('utc'::text, now())")) @updatedAt

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(nanoid())
  accessToken  String   @unique
  sessionToken String   @unique
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String

  createdAt DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamp()
  updatedAt DateTime @default(dbgenerated("timezone('utc'::text, now())")) @updatedAt
}

model VerificationToken {
  id         String   @id @default(nanoid())
  identifier String
  token      String   @unique
  expires    DateTime

  createdAt DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamp()
  updatedAt DateTime @default(dbgenerated("timezone('utc'::text, now())")) @updatedAt

  @@unique([identifier, token])
}

model User {
  id            String        @id @default(nanoid())
  active        Boolean       @default(true)
  name          String?
  email         String        @unique
  emailVerified DateTime?
  login         String?       @unique
  image         String?
  accounts      Account[]
  sessions      Session[]
  services      UserService[]
  memberships   Membership[]
  devices       UserDevice[]

  achievements UserAchievement[]

  achievementsCreated Achievement[]     @relation("achievementsCreated")
  achievementsAwarded UserAchievement[] @relation("achievementsAwarded")

  organizationUnit   OrganizationUnit? @relation(fields: [organizationUnitId], references: [id])
  organizationUnitId String?

  settings UserSettings?

  supervisor   User?   @relation("userSupervisor", fields: [supervisorId], references: [id])
  supervisorId String?
  supervisorOf User[]  @relation("userSupervisor")

  supervisorIn Group[]

  title String?

  bonusPoints  Int            @default(0)
  bonusHistory BonusHistory[] @relation("bonusHistory")
  bonusChanges BonusHistory[] @relation("bonusChanges")

  // TODO: delete issues/690
  roleDeprecated UserRoleDeprecated @default(USER) @map("role")

  roleCode String?
  role     UserRole? @relation(fields: [roleCode], references: [code])

  deactivatedAt DateTime?

  vacancy Vacancy? @relation("vacancyUser")

  vacanciesManaging Vacancy[] @relation("hiringManager")
  vacanciesHr       Vacancy[] @relation("vacancyHr")

  historyEvents  HistoryEvent[] @relation("historyEvents")
  historyChanges HistoryEvent[] @relation("historyChanges")

  scheduledDeactivations        ScheduledDeactivation[] @relation("scheduledDeactivation")
  scheduledDeactivationsCreated ScheduledDeactivation[] @relation("scheduledDeactivationCreated")

  groupAdmins          GroupAdmin[]
  userCreationRequests UserCreationRequest[]

  createdAt DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamp()
  updatedAt DateTime @default(dbgenerated("timezone('utc'::text, now())")) @updatedAt
}

enum UserCreationRequestStatus {
  Approved
  Denied
}

model UserCreationRequest {
  id                    String                     @id @default(nanoid())
  name                  String
  email                 String
  login                 String
  supervisor            User                       @relation(fields: [supervisorLogin], references: [login])
  supervisorLogin       String
  organization          OrganizationUnit           @relation(fields: [organizationUnitId], references: [id])
  organizationUnitId    String
  group                 Group                      @relation(fields: [groupId], references: [id])
  groupId               String
  createExternalAccount Boolean
  status                UserCreationRequestStatus?
  comment               String?
  services              Json

  createdAt DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamp()
  updatedAt DateTime @default(dbgenerated("timezone('utc'::text, now())")) @updatedAt
}

model UserRole {
  code String @id @unique
  name String

  users  User[]
  tokens ApiToken[]

  createUser                Boolean @default(false)
  editRoleScopes            Boolean @default(false)
  editUserRole              Boolean @default(false)
  editUserCreationRequests  Boolean @default(false)
  editUser                  Boolean @default(false)
  editUserActiveState       Boolean @default(false)
  editUserAchievements      Boolean @default(false)
  editUserBonuses           Boolean @default(false)
  viewUserBonuses           Boolean @default(false)
  viewUserExtendedInfo      Boolean @default(false)
  editScheduledDeactivation Boolean @default(false)
  viewScheduledDeactivation Boolean @default(false)

  editFullGroupTree          Boolean @default(false)

  viewHistoryEvents Boolean @default(false)

  // TODO: rename to UserRole issues/690
  @@map("UserRoleModel")
}

model ExternalService {
  name        String        @id @unique
  displayName String?
  icon        String
  linkPrefix  String?
  users       UserService[]

  createdAt DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamp()
  updatedAt DateTime @default(dbgenerated("timezone('utc'::text, now())")) @updatedAt
}

model ScheduledDeactivation {
  id String @id @default(uuid())

  userId String
  user   User   @relation("scheduledDeactivation", fields: [userId], references: [id])

  creatorId String
  creator   User   @relation("scheduledDeactivationCreated", fields: [creatorId], references: [id])

  phone String
  email String

  deactivateDate DateTime
  type           String
  disableAccount Boolean

  location String

  organization          String?
  newOrganization       String?
  organizationUnitId    String?
  organizationUnit      OrganizationUnit? @relation("oldOrganizationUnit", fields: [organizationUnitId], references: [id])
  newOrganizationUnitId String?
  newOrganizationUnit   OrganizationUnit? @relation("newOrganizationUnit", fields: [newOrganizationUnitId], references: [id])

  teamLead    String
  newTeamLead String?

  organizationRole    String?
  newOrganizationRole String?

  organizationalGroup    String?
  newOrganizationalGroup String?

  workMode        String?
  workModeComment String?

  testingDevices Json?
  devices        Json?

  comments String?

  unitId Int

  transferPercentage Int?

  canceled      Boolean   @default(false)
  canceledAt    DateTime?
  cancelComment String?

  createdAt DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamp()
  updatedAt DateTime @default(dbgenerated("timezone('utc'::text, now())")) @updatedAt
}

model UserService {
  user   User   @relation(fields: [userId], references: [id])
  userId String

  service     ExternalService @relation(fields: [serviceName], references: [name])
  serviceName String

  organizationUnit   OrganizationUnit? @relation(fields: [organizationUnitId], references: [id])
  organizationUnitId String?

  serviceId String
  active    Boolean @default(true)

  createdAt DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamp()
  updatedAt DateTime @default(dbgenerated("timezone('utc'::text, now())")) @updatedAt

  @@unique([serviceName, serviceId])
  @@map("UserServices")
}

model UserSettings {
  id String @id @default(nanoid())

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  theme  String @default("system")
  locale String @default("en")

  showAchievements Boolean @default(true)
}

model OrganizationUnit {
  id          String     @id @default(nanoid())
  name        String
  country     String
  description String?
  apiToken    ApiToken[]

  userCreationRequests UserCreationRequest[]
  users                User[]
  userServices         UserService[]
  oldOrganizationUnit  ScheduledDeactivation[] @relation("oldOrganizationUnit")
  newOrganizationUnit  ScheduledDeactivation[] @relation("newOrganizationUnit")
}

model Group {
  id          String  @id @default(nanoid())
  name        String
  description String?

  archived Boolean @default(false)

  virtual Boolean @default(false)

  organizational Boolean @default(false)

  parent   Group?  @relation("GroupChildren", fields: [parentId], references: [id])
  parentId String?

  children Group[] @relation("GroupChildren")

  supervisor   User?   @relation(fields: [supervisorId], references: [id])
  supervisorId String?

  memberships Membership[]

  vacancies Vacancy[] @relation("groupVacancy")

  historyEvents        HistoryEvent[]        @relation("historyEvents")
  userCreationRequests UserCreationRequest[]

  groupAdmins GroupAdmin[]

  createdAt DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamp()
  updatedAt DateTime @default(dbgenerated("timezone('utc'::text, now())")) @updatedAt
}

model Membership {
  id String @id @default(nanoid())

  archived Boolean @default(false)

  userId String
  user   User   @relation(fields: [userId], references: [id])

  groupId String
  group   Group  @relation(fields: [groupId], references: [id])

  roles Role[]

  percentage Int?

  createdAt DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamp()
  updatedAt DateTime @default(dbgenerated("timezone('utc'::text, now())")) @updatedAt

  @@unique([userId, groupId])
}

model Role {
  id   String @id @default(nanoid())
  name String @unique

  memberships Membership[]

  createdAt DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamp()
  updatedAt DateTime @default(dbgenerated("timezone('utc'::text, now())")) @updatedAt
}

model BonusRule {
  id                        String         @id @default(nanoid())
  bonusAmountForAchievement Int
  categoryId                String
  externalAchievmentIds     String[]
  history                   BonusHistory[]
  achievement               Achievement[]
}

model BonusForAchievementRule {
  id                            String      @id @default(nanoid())
  bonusesPerCrewAchievement     Int
  description                   String
  achievementId                 String
  achievement                   Achievement @relation(fields: [achievementId], references: [id])
  externalAchievementId         String?
  externalAchievementCategoryId String?

  @@unique([achievementId])
}

model BonusHistory {
  id          String      @id @default(nanoid())
  action      BonusAction
  amount      Int
  description String

  targetUser   User   @relation("bonusHistory", fields: [targetUserId], references: [id])
  targetUserId String

  actingUser   User   @relation("bonusChanges", fields: [actingUserId], references: [id])
  actingUserId String

  externalAchievementId         String? @map("achievementId")
  externalAchievementCategoryId String? @map("achievementCategory")

  rule   BonusRule? @relation(fields: [ruleId], references: [id])
  ruleId String?

  createdAt DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamp()
}

model ApiToken {
  id          String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String

  roleCode String?
  role     UserRole? @relation(fields: [roleCode], references: [code])

  historyChanges HistoryEvent[] @relation("historyChanges")

  organizationUnit   OrganizationUnit? @relation(fields: [organizationUnitId], references: [id])
  organizationUnitId String?
}

// TODO: delete issues/690
enum UserRoleDeprecated {
  ADMIN
  USER

  @@map("UserRole")
}

enum BonusAction {
  ADD
  SUBTRACT
}

model Device {
  name  String       @id @unique
  users UserDevice[]

  createdAt DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamp()
  updatedAt DateTime @default(dbgenerated("timezone('utc'::text, now())")) @updatedAt
}

model UserDevice {
  user   User   @relation(fields: [userId], references: [id])
  userId String

  device     Device @relation(fields: [deviceName], references: [name])
  deviceName String

  deviceId String
  active   Boolean @default(true)

  createdAt DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamp()
  updatedAt DateTime @default(dbgenerated("timezone('utc'::text, now())")) @updatedAt

  @@unique([deviceName, deviceId])
}

model Vacancy {
  id   String @id @default(nanoid())
  name String

  hireStreamId String

  user   User?   @relation("vacancyUser", fields: [userId], references: [id])
  userId String?

  group   Group  @relation("groupVacancy", fields: [groupId], references: [id])
  groupId String

  archived   Boolean   @default(false)
  archivedAt DateTime?

  status VacancyStatus
  unit   Int?
  grade  Int?

  hiringManager   User   @relation("hiringManager", fields: [hiringManagerId], references: [id])
  hiringManagerId String

  hr   User   @relation("vacancyHr", fields: [hrId], references: [id])
  hrId String

  closedAt    DateTime?
  activeSince DateTime?
  timeAtWork  Int       @default(0)

  createdAt DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamp()
  updatedAt DateTime @default(dbgenerated("timezone('utc'::text, now())")) @updatedAt

  @@unique([userId])
}

enum VacancyStatus {
  ACTIVE
  ON_HOLD
  CLOSED
  ON_CONFIRMATION
}

model AppConfig {
  id      String  @id @default(cuid())
  favicon String?
  logo    String?
}

model Achievement {
  id          String  @id @default(nanoid())
  description String
  title       String
  icon        String
  hidden      Boolean @default(false)
  nomination  String?

  creator   User?   @relation("achievementsCreated", fields: [creatorId], references: [id])
  creatorId String?

  achievements UserAchievement[]

  bonusRule   BonusRule? @relation(fields: [bonusRuleId], references: [id])
  bonusRuleId String?

  bonusForAchievementRule BonusForAchievementRule?

  createdAt DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamp()
}

model UserAchievement {
  id String @id @default(nanoid())

  count Int @default(1)

  userId String
  user   User   @relation(fields: [userId], references: [id])

  awarderId String
  awarder   User   @relation("achievementsAwarded", fields: [awarderId], references: [id])

  achievementId String
  achievement   Achievement @relation(fields: [achievementId], references: [id])

  createdAt DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamp()
  updatedAt DateTime @default(dbgenerated("timezone('utc'::text, now())")) @updatedAt

  @@unique([userId, achievementId])
}

model HistoryEvent {
  id String @id @default(nanoid())

  actingUserId String?
  actingUser   User?   @relation("historyChanges", fields: [actingUserId], references: [id])

  actingTokenId String?   @db.Uuid
  actingToken   ApiToken? @relation("historyChanges", fields: [actingTokenId], references: [id])

  actingSubsystem String?

  user   User?   @relation("historyEvents", fields: [userId], references: [id])
  userId String?

  group   Group?  @relation("historyEvents", fields: [groupId], references: [id])
  groupId String?

  action String

  before Json?
  after  Json?

  createdAt DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamp()
}

model GroupAdmin {
  user   User   @relation(fields: [userId], references: [id])
  userId String

  group   Group  @relation(fields: [groupId], references: [id])
  groupId String

  createdAt DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamp()
  updatedAt DateTime @default(dbgenerated("timezone('utc'::text, now())")) @updatedAt

  @@unique([userId, groupId])
}

model Attach {
  id               String     @id @default(uuid())
  createdAt        DateTime   @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamp()
  link             String
  filename         String
  deletedAt        DateTime?
}
